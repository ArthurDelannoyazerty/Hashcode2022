package test_initiation_hashcode;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Main_start {

	public static void main(String[] args) throws IOException {
		int whattxt = 0;	//choose file 0 -> (n-1)
		
		String[] array = readFile(whattxt);
		System.out.println(Arrays.toString(array));
	}
	
	
	static String[] readFile(int number) throws IOException  {
		String[] path = {"a_an_example.in.txt","b_basic.in.txt","c_coarse.in.txt","d_difficult.in.txt","e_elaborate.in.txt"};
		
		// list that holds strings of a file
		String[] array = new String[countLinesNew(path[number])+1];
		System.out.println("nombre de lignes = "+(countLinesNew(path[number])+1));
       
        // load data from file
        BufferedReader bf = new BufferedReader(new FileReader(path[number]));
       
        // read entire line as string
        String line = bf.readLine();
       
        // checking for end of file
        while (line != null) {
            String[] words = line.split(" ");
            System.out.println(Arrays.toString(words));
            line = bf.readLine();
        }
       
        // closing bufferreader object
        bf.close();
       
        // storing the data in arraylist to array
       
        // printing each line of file
        // which is stored in array
        for (String str : array) {
            System.out.println(str);
        }
        
		return array;
	}
	
	public static int countLinesNew(String filename) throws IOException {
	    InputStream is = new BufferedInputStream(new FileInputStream(filename));
	    try {
	        byte[] c = new byte[1024];

	        int readChars = is.read(c);
	        if (readChars == -1) {
	            // bail out if nothing to read
	            return 0;
	        }

	        // make it easy for the optimizer to tune this loop
	        int count = 0;
	        while (readChars == 1024) {
	            for (int i=0; i<1024;) {
	                if (c[i++] == '\n') {
	                    ++count;
	                }
	            }
	            readChars = is.read(c);
	        }

	        // count remaining characters
	        while (readChars != -1) {
	            System.out.println(readChars);
	            for (int i=0; i<readChars; ++i) {
	                if (c[i] == '\n') {
	                    ++count;
	                }
	            }
	            readChars = is.read(c);
	        }

	        return count == 0 ? 1 : count;
	    } finally {
	        is.close();
	    }
	}
	
}
